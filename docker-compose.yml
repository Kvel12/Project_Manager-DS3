version: '3.8'

services:
  logging-service:
    build:
      context: ./logging-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
      - "24224:24224/tcp"
      - "24224:24224/udp"
    volumes:
      - ./logging-service/logs:/fluentd/log
    networks:
      - microservices-net
    environment:
      - NODE_ENV=development
      - PORT=3005
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        mkdir -p /fluentd/log && 
        chmod -R 777 /fluentd/log && 
        fluentd -c /fluentd/etc/fluent.conf & 
        node src/index.js"
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./api-gateway/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./api-gateway/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./api-gateway/logs:/var/log/nginx
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PROJECT_SERVICE_URL=http://project-service:3002
      - PAYMENT_SERVICE_URL=http://payment-service:3003
      - FLUENTD_HOST=logging-service
      - FLUENTD_PORT=24224
    depends_on:
      logging-service:
        condition: service_healthy
      auth-service:
        condition: service_started
      project-service:
        condition: service_started
      payment-service:
        condition: service_started
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_NAME=auth_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-super-secret-key-change-this-in-production
      - FLUENTD_HOST=logging-service
      - FLUENTD_PORT=24224
    depends_on:
      logging-service:
        condition: service_healthy
      auth-db:
        condition: service_healthy
    networks:
      - microservices-net
    volumes:
      - ./auth-service/logs:/usr/src/app/logs
    restart: unless-stopped

  project-service:
    build:
      context: ./project-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=project-db
      - DB_PORT=5432
      - DB_NAME=project_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-secret-key
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FLUENTD_HOST=logging-service
      - FLUENTD_PORT=24224
    depends_on:
      logging-service:
        condition: service_healthy
      project-db:
        condition: service_healthy
    networks:
      - microservices-net
    volumes:
      - ./project-service/logs:/usr/src/app/logs
    restart: unless-stopped

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=payment-db
      - DB_PORT=5432
      - DB_NAME=payment_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-secret-key
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FLUENTD_HOST=logging-service
      - FLUENTD_PORT=24224
    depends_on:
      logging-service:
        condition: service_healthy
      payment-db:
        condition: service_healthy
    networks:
      - microservices-net
    volumes:
      - ./payment-service/logs:/usr/src/app/logs
    restart: unless-stopped

  auth-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  project-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=project_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - project-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=payment_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  microservices-net:
    driver: bridge

volumes:
  auth-db-data:
  project-db-data:
  payment-db-data: